add2<- function(x,y) {}
x+y
add2<- function(x,y) {
x+y
}
add2(3,5)
add2<- function(x,y){
x+y
}
add2(3,5)
x<- sys.time()
x
x<- Sys.time()
x
?strptime
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
swirl()
library(swirl)
ls()
rm(list=ls())
swirl()
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
(5==7)=!TRUE
(5==7)==!TRUE
!(5==7)
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins',
| 'twins')
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints<- sample(10)
ints
ints > 5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
submit()
my_mean(c(4, 5, 10))
7 %% 4
?%%
%%
%%?
submit()
7 %/% 4
6 %/%3
submit()
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
add_two_numbers <- function(num1, num2){
num1 + num2
}
multiply_two_numbers <- function(num1, num2){
num1 * num2
}
some_function <- function(func){
func(2, 4)
}
func(2,4)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8) )
evaluate(function(x){x+1}, 6)
evaluate(function(x[1]), c(8, 4, 0))
evaluate(function(x)[1], c(8, 4, 0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
sumbit()
submit()
telegram("mama", "tata")
submit()
submit()
submit()
submit()
mad_libs(NY,angry,lamps)
args(mad_libs)
submit()
submit()
submit()
submit()
'I'%p% 'love'%p% 'R!'
d1<- Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<- Sys.time()
t1
class(t1)
unclass(t1)
t2<- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<- "October 17, 1986 08:24"
t4<- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
x<-1:4
lapply(x, runif)
?runif
x <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3, 2))
x
> lapply(x, function(elt) elt[,1])
lapply(x, function(elt) elt[,1])
?elt
x <- matrix(rnorm(200), 20, 10)
x
apply(x, 2, mean)
?str
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
f <- gl(3, 10)
f
tapply(x, f, mean)
swirl*()
load(swirl)
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat<- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6)
)
unique_vals<- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1)
)
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,
| flags$landmass, mean)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
head(iris)
iris
vir<- iris["virginica"]
vir<- iris[["virginica"]]
vir
tapply(iris$Sepal.Length,iris$Species, mean)
apply(iris[, 1:4], 2, mean)
colMeans(iris)
apply(iris, 1, mean)
apply(iris, 2, mean)
apply(iris[, 1:4], 1, mean)
library(datasets)
data(mtcars)
?mtcars
mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(mtcars, cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
apply(mtcars, 2, mean)
split(mtcars, mtcars$cyl)
tapply(mtcars$hp, mtcars$cyl, mean)
mean(mtcars$hp)
mean(mtcars$hp, mtcars$cyl=4)
mean(mtcars$hp, mtcars$cyl==4)
82.63636-209.21429
debug(ls)
ls
debug(ls)
ls
n
debug(lm)
lm(y-x)
debug(ls)
ls
2
debug(ls)
ls
4
b
ls
ls()
makeCacheMatrix <- function (x = matrix())
makeCacheMatrix
q
q
dd
d
Q
DD,
a<- matrix (nnorm(10), 3,4)
a<- matrix (rnorm(12), 3,4)
a
solve(a)
a<- matrix (rnorm(16), 4,4)
solve(a)
a
solve(a)
b<- matrix (rnorm(16), 4,4)
b
solve(b)
c<-solve(b)
b
solve(c)
load(makeCacheMatrix)
gwdir
list()
dir
dir()
setwd("~/Data science")
load(makeCacheMatrixJZP)
list()
dir()
load("makeCacheMatrixJZP.R")
load("cachesolveJZP.R")
fun<- makeCacheMatrixJZP.R
fun<- makeCacheMatrixJZP()
load("corr.R")
dir()
source("makeCacheMatrixJZP.R")
source("cachesolveJZP.R")
fun<- makeCacheMatrixJZP.R()
fun<- makeCacheMatrix.R()
source("makeCacheMatrixJZP.R")
source("cachesolveJZP.R")
fun<- makeCacheMatrixJZP()
fun$set(matrix(1:4, 2))
source("makeCacheMatrixJZP.R")
source("cachesolveJZP.R")
fun<- makeCacheMatrixJZP()
fun$set(matrix(1:4, 2))
fun$get()
fun$setInversion()
dir()
source("makeCacheMatrixInt.R")
funs <- makeCacheMatrix()
funs$set(matrix(1:4, 2))
funs$get(
)
funs$setInverse()
funs$getInverse()
dir
dir*()
dir()
dir()
setwd("~/Data science/ProgrammingAssignment2")
dir()
source("cachematrix.R")
funs <- makeCacheMatrix()
funs$set(matrix(1:4, 2))
t <- cacheSolve()
t <- cacheSolve(matrix(1:4, 2))
makeCacheMatrix(matrix(1:4, 2))
cacheSolve(matrix(1:4, 2))
a<- matrix(1:4, 2)
makeCacheMatrix(a)
cacheSolve(a)
cachematrix(a)
a
slove(a)
solve(a)
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
b = rbind(c(1, -1/4), c(-1/4, 1))
c = makeCacheMatrix(x)
c$get()
cacheSolve(c)
cacheSolve(c)
source("cachematrix.R")
f = rbind(c(1, -1/4), c(-1/4, 1))
g = makeCacheMatrix(x)
g$get()
cacheSolve(g)
cacheSolve(g)
slove(f)
solve(f)
cacheSolve(g)
dir
dir(9)
dir()
dir()
setwd("~/Data science")
dir()
source("MatrixINT.R")
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
setwd("~/Data science/ProgrammingAssignment2")
source("MatrixINT.R")
dir()
source("cachematrix.R")
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
source("cachematrix.R")
m = makeCacheMatrix(x)
cacheSolve(m)
source("cachematrix.R")
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
source("cachematrix.R")
cacheSolve(m)
